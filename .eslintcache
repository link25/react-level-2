[{"C:\\Users\\Aly\\Desktop\\js\\search\\src\\components\\SearchComponent\\Search.js":"1","C:\\Users\\Aly\\Desktop\\js\\search\\src\\App.js":"2","C:\\Users\\Aly\\Desktop\\js\\search\\src\\index.js":"3","C:\\Users\\Aly\\Desktop\\js\\search\\src\\reportWebVitals.js":"4"},{"size":3774,"mtime":1606255175412,"results":"5","hashOfConfig":"6"},{"size":210,"mtime":1606245267230,"results":"7","hashOfConfig":"6"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"9tm9lj",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Aly\\Desktop\\js\\search\\src\\components\\SearchComponent\\Search.js",["19"],"import React from \"react\";\r\nimport \"./Search.css\";\r\nimport axios from \"axios\";\r\nimport Loader from \"../../loader.gif\";\r\n\r\nclass Search extends React.Component {\r\n  // Initilise some information in state\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      query: \"\",\r\n      results: {},\r\n      loading: false,\r\n      message: \"\",\r\n      totalResults: 0,\r\n    };\r\n    this.cancel = \"\";\r\n  }\r\n  getPageCount = (total, denominator) => {\r\n    const divisible = 0 === total % denominator;\r\n    const valueToBeAdded = divisible ? 0 : 1;\r\n    return Math.floor(total / denominator) + valueToBeAdded;\r\n  };\r\n  // fetching for users\r\n  fetchSearchResults = (query) => {\r\n    const searchUrl = ` https://api.github.com/search/users?q=${query}`;\r\n\r\n    if (this.cancel) {\r\n      this.cancel.cancel();\r\n    }\r\n\r\n    this.cancel = axios.CancelToken.source();\r\n\r\n    axios\r\n      .get(searchUrl, {\r\n        cancelToken: this.cancel.token,\r\n      })\r\n      .then((res) => {\r\n        const total = res.data.total;\r\n\r\n        const resultNotFoundMsg = !res.data.items.length\r\n          ? \"There are no more search results. Please try a new search\"\r\n          : \"\";\r\n        this.setState({\r\n          results: res.data.items,\r\n          message: resultNotFoundMsg,\r\n          totalResults: total,\r\n          loading: false,\r\n        });\r\n      })\r\n\r\n      .catch((error) => {\r\n        if (axios.isCancel(error) || error) {\r\n          this.setState({\r\n            loading: false,\r\n            message: \"Failed to fetch the data. Please check network\",\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  handleOnInputChange = (event) => {\r\n    const query = event.target.value;\r\n    if (!query) {\r\n      this.setState({ query, results: {}, message: \"\" });\r\n    } else {\r\n      this.setState({ query, loading: true, message: \"\" }, () => {\r\n        this.fetchSearchResults(query);\r\n      });\r\n    }\r\n  };\r\n  // Displaying object from the API query\r\n  renderSearchResults = () => {\r\n    const { results } = this.state;\r\n\r\n    if (Object.keys(results).length && results.length) {\r\n      return (\r\n        <div className=\"results-container\">\r\n          {results.map((result) => {\r\n            return (\r\n              <a\r\n                key={result.id}\r\n                href={result.avatar_url}\r\n                className=\"result-item\"\r\n              >\r\n                <h6 className=\"image-username\">{result.login}</h6>\r\n                <div className=\"image-wrapper\">\r\n                  <img\r\n                    className=\"image\"\r\n                    src={result.avatar_url}\r\n                    alt={`${result.login} image`}\r\n                  />\r\n                </div>\r\n              </a>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { query, loading, message } = this.state;\r\n    console.warn(this.state);\r\n    return (\r\n      <div className=\"container\">\r\n        {/*Heading*/}\r\n        <h2 className=\"heading\">Github User Search</h2>\r\n        {/*Search Input*/}\r\n        <label className=\"search-label\" htmlFor=\"search-input\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"query\"\r\n            value={query}\r\n            id=\"search-input\"\r\n            placeholder=\"Search...\"\r\n            onChange={this.handleOnInputChange}\r\n          />\r\n          <i className=\"fa fa-search search-icon\" aria-hidden=\"true\" />\r\n        </label>\r\n        {/*\tError Message*/}\r\n        {message && <p className=\"message\">{ message }</p>}\r\n\r\n        {/*\tLoader*/}\r\n        <img\r\n          src={Loader}\r\n          className={`search-loading ${loading ? \"show\" : \"hide\"}`}\r\n          alt=\"loader\"\r\n        />\r\n\r\n        {/*\tResult*/}\r\n        {this.renderSearchResults()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","C:\\Users\\Aly\\Desktop\\js\\search\\src\\App.js",[],"C:\\Users\\Aly\\Desktop\\js\\search\\src\\index.js",[],"C:\\Users\\Aly\\Desktop\\js\\search\\src\\reportWebVitals.js",[],{"ruleId":"20","severity":1,"message":"21","line":88,"column":19,"nodeType":"22","endLine":92,"endColumn":21},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement"]